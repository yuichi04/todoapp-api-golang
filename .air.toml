# Air設定ファイル
# Goアプリケーションの開発時に自動リロード（ホットリロード）を提供
# ファイルの変更を監視して、自動的にアプリケーションを再ビルド・再起動
#
# Air使用の学習ポイント：
# 1. 開発効率の向上（コード変更時の手動再起動が不要）
# 2. ファイル監視システムの理解
# 3. 開発環境と本番環境の分離
# 4. ビルドプロセスの自動化
#
# Air v2対応設定

# ルートディレクトリ設定
root = "."

# テスト実行用ディレクトリ
testdata_dir = "testdata"

# 一時ファイル用ディレクトリ
tmp_dir = "tmp"

[build]
  # 前処理コマンド（オプション）
  # ビルド前に実行したいコマンドがある場合に使用
  # 例：プロトコルバッファーのコード生成、静的アセットの処理など
  pre_cmd = []

  # メインのビルドコマンド
  # 標準パッケージを使用したアプリケーションのビルド設定
  cmd = "go build -o ./tmp/todoapp ./cmd/api"
  
  # 生成されるバイナリファイルのパス
  bin = "tmp/todoapp"
  
  # フルビルド（clean build）を実行するかどうか
  full_bin = ""
  
  # 監視対象のファイル拡張子
  # Goソースファイル、設定ファイル、テンプレートファイルなどを監視
  include_ext = ["go", "tpl", "tmpl", "html", "json", "yaml", "yml", "toml", "env"]
  
  # 監視対象外のファイル拡張子
  # ログファイル、一時ファイル、バイナリファイルなどを除外
  exclude_ext = ["log", "txt", "exe", "dll", "so", "dylib"]
  
  # 監視対象のディレクトリ
  # アプリケーションのソースコードが含まれるディレクトリを指定
  include_dir = [
    "cmd",
    "internal", 
    "pkg",
    "docs",
    "scripts"
  ]
  
  # 監視対象外のディレクトリ
  # ベンダーディレクトリ、一時ファイル、ログディレクトリなどを除外
  exclude_dir = [
    "assets", 
    "tmp", 
    "vendor", 
    "testdata",
    "node_modules",
    ".git",
    "bin",
    "logs"
  ]
  
  # 監視対象外のファイル
  # 特定のファイル名を除外する場合に使用
  exclude_file = []
  
  # 監視対象外のファイル（正規表現）
  # より柔軟なファイル除外パターンを指定
  exclude_regex = [
    "_test\\.go",           # テストファイルの変更では再起動しない
    "\\.#",                 # Emacsの一時ファイル
    "~$",                   # 一時ファイル
    "\\.tmp$",              # 一時ファイル
    "\\.log$"               # ログファイル
  ]
  
  # 無視する変更（unchanged）
  exclude_unchanged = false
  
  # シンボリックリンクをフォローするかどうか
  follow_symlink = false
  
  # ポーリング間隔（ミリ秒）
  # ファイル変更の監視間隔を調整
  poll_interval = 500
  
  # 遅延時間（ミリ秒）
  # ファイル変更検出から実際のビルド実行までの遅延
  # 連続する変更をまとめて処理するための設定
  delay = 1000
  
  # 再起動時に前のプロセスを強制終了するまでの待機時間
  stop_on_root = ""
  
  # バイナリ実行時の引数
  args_bin = []
  
  # ログ出力設定
  log = "build-errors.log"
  
  # バイナリ実行時に標準入力を送るかどうか
  send_interrupt = false
  
  # プロセス終了シグナル
  # SIGTERM: 正常終了シグナル
  kill_delay = "0s"

[color]
  # カラーログの設定
  # 開発時の視認性を向上させるための色分け設定
  
  # メインログの色
  main = "magenta"
  
  # ウォッチャーログの色  
  watcher = "cyan"
  
  # ビルドログの色
  build = "yellow"
  
  # 実行ログの色
  runner = "green"

[log]
  # ログ設定
  
  # ログ出力時刻の表示
  time = true
  
  # メインログを表示するかどうか
  main_only = false

[misc]
  # その他の設定
  
  # 起動時にブラウザを開くかどうか
  clean_on_exit = true

# 開発環境での Air 使用方法：
#
# 1. Airのインストール:
#    go install github.com/cosmtrek/air@latest
#
# 2. 設定ファイルの配置:
#    プロジェクトルートに .air.toml を配置
#
# 3. Air の実行:
#    air
#    または
#    air -c .air.toml
#
# 4. 開発の流れ:
#    - Airを起動すると、指定されたファイルの監視が開始
#    - コードファイルを編集・保存
#    - Airが変更を検出し、自動的にビルド・再起動
#    - ブラウザで変更内容を即座に確認可能
#
# 本アプリケーションでのAir活用のメリット：
#
# 1. 開発効率の向上:
#    - コード変更時の手動ビルド・再起動が不要
#    - APIの動作確認が迅速に可能
#
# 2. デバッグの効率化:
#    - 変更の効果を即座に確認
#    - 問題のある変更を素早く特定
#
# 3. 標準パッケージ学習の促進:
#    - 試行錯誤が容易
#    - 実験的なコード変更のハードルが低下
#
# 注意事項：
# - 本番環境では使用しない（開発専用ツール）
# - 大きなファイルや頻繁に変更されるファイルの監視は除外推奨
# - Docker環境では適切なボリュームマウント設定が必要